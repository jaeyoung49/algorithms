**Recursive Thinking
	현재 픽셀이 속한 blob의 크기를 카운트하려면
		현재 픽셀이 image color가 아니라면
			0을 반환한다
		현재 픽셀이 image color라면
			먼저 현재 픽셀을 카운트한다 (count=1).
			현재 픽셀이 중복 카운트되는 것을 방지하기 위해 다른 색으로 칠한다.
			현재 픽셀에 이웃한 모든 픽셀들에 대해서
				그 픽셀이 속한 blob의 크기를 카운트하여 카운터에 더해준다.
			카운터를 반환한다
	
			
				 0  1  2  3  4  5  6  7
			0	{1, 0, 0, 0, 0, 0, 0, 1},
			1	{0, 1, 1, 0, 0, 1, 0, 0},
			2	{1, 1, 0, 0, 1, 0, 1, 0},
			3	{0, 0, 0, 0, 0, 1, 0, 0},
			4	{0, 1, 0, 1, 0, 1, 0, 0},
			5	{0, 1, 0, 1, 0, 1, 0, 0},
			6	{1, 0, 0, 0, 1, 0, 0, 1},
			7	{0, 1, 1, 0, 0, 1, 1, 1},

	1) x=5, y=3이라고 사정, 즉 이 픽셀이 포함된 blob의 크기를 계산하는 것이 목적이다. 		//count=0
	2) 먼저 현재 cell을 다른색으로 칠하고 count를 1증가한다.
		이렇게 색칠하는 것은 이 픽셀이 중복 count되는 것을 방지하기 위해서이다. 			//count=1
	3) 인접한 8개의 픽셀 각각에 대해서 순서대로 그 픽셀이 포함된 blob의 크기를 count한다.
		북, 북동, 동, 동남, 남, 남서, 서, 서북 순서로 고려한다.
			- 북쪽 픽셀이 포함된 blob의 크기는 0이다. 따라서 count 값은 변화 없다.	 		//count=1
	4) 		- 북동쪽 픽셀이 속한 blob을 count하고 count된 픽셀들을 색칠한다. 				//count=1+3
	5) 		- 동, 남동쪽 픽셀이 포함된 blob의 크기는 0이다. 따라서 count 값은 변화 없다. 	//count=4
	6) 		- 남쪽 픽셀이 속한 blob의 크기는 9이다. count하고 색칠한다. 					//count=4+9
	7) 		- 남서, 서, 서북쪽 픽셀이 속한 blob은 없거나 혹은 이미 카운트 되었다.			//count=13

	 
**Decision Problem
	Algorithm for countCells(x, y)
		if the pixel (x, y) is outside the grid
			the result is 0;
		else if pixel (x, y) is not an image pixel or already counted
			the result is 0;
		else
			set the color of the pixel (x, y) to a red color;	// 이미 카운트 되었음을 표시
			the result is 1 plus the number of cells in each piece of
				the blob that includes a nearest neighbor; 
	
