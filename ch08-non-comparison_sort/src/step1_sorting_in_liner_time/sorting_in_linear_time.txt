**선형시간 정렬 알고리즘 ( sorting in linear time ) **
	: Non-comparison sort + 시간복잡도 O(n)
		<------> comparison sort + 시간복잡도 O(n* log n)

	[1] Counting Sort		
		- n개의 정수를 정렬하라. 단 모든 정수는 0에서 k사이의 정수이다.
			ex) n명의 학생들의 시험점수를 정렬하라. 
				단 모든 점수는 100이하의 양의 정수이다.
			
		- k=5인 경우의 예	// 사진참조(SortingInLinearTime-1_Basic.jpg)
			
						1	2	3	4	5	6	7	8
					A	2	5	3	0	2	3	0	3
					
						0	1	2	3	4	5
			C(Counter)	2	0	2	3	0	1	----- 길이 k인 배열에 각 정수의 개수를 count한다
			
									
				result	0	0	2	2	3	3	3	5
				
		- Design Counting Sort
			
			int A[n];
			int C[k] = (0, };
			for(int s=1, i=0; i<=k; i++){
				for(int j=0; j<C[i]; j++){
					A[s++] = j;
				}
			}							=======> Is it okay?
												--> No. 대부분의 경우 정렬할 key 값들은 
													레코드의 일부분이기 때문
													
	[2] // 사진참조(SortingInLinearTime-2_Logic.jpg)
		1) 기존의 개수를 구한다
		
						1	2	3	4	5	6	7	8
					A	2	5	3	0	2	3	0	3
					
						0	1	2	3	4	5
			C(Counter)	2	0	2	3	0	1
		
		
		2) counter의 누적합을 구한다
		
						0	1	2	3	4	5
			C(Counter)	2	2	4	7	7	8	----- 0~5까지 누적합을 구한다
												----- k보다 작거나 같은 값은?			
			
		3) 새로운 배열 B에 3을 넣는다
		 
						1	2	3	4	5	6	7	8
					B	_	_	_	_	_	_	3	_
												|
												7번째 자리에는 반드시 3은 들어가야 한다
						0	1	2	3	4	5
			C(Counter)	2	2	4	6	7	8
									|
									만약에 입력에서 3이 또 나온다면 6번째 위치로 하겠다는 의미
		
									
		4) B에 0을 넣는다
		
						1	2	3	4	5	6	7	8
					B	_	0	_	_	_	_	3	_
							|
							2번째 자리에는 반드시 0은 들어가야 한다
							
						0	1	2	3	4	5
			C(Counter)	1	2	4	6	7	8
						|
						다음 0번이 나오면 입력되야할 위치
						
						
		5) B에 3을 다시 넣는 경우
		
						1	2	3	4	5	6	7	8
					B	_	0	_	_	_	3	3	_
							|
							2번째 자리에는 반드시 0은 들어가야 한다
							
						0	1	2	3	4	5
			C(Counter)	1	2	4	5	7	8
									|
									다음 0번이 나오면 입력되야할 위치
									
		6) 결과
		
						1	2	3	4	5	6	7	8
					B	0	0	2	2	3	3	3	5
							
						0	1	2	3	4	5
			C(Counter)	1	2	4	5	7	8
			
	
	[3] Design Counting-Sort(A, B, k)		// 사진참조 (SortingInLinearTime-3_DesignSort.jpg)
		
		for i <- 0 to k
			do C[i] <- 0
		for j <- 1 to length[A]
			do C[A[j]] <- C[A[j]] + 1	// C[i] now contains the number of elements equal to i
										// k값의 개수
		for i <- 1 to k
			do C[i] <- C[i] + C[i-1]	// C[i] now contains the number of elements less than or equal to i
										// 누적합
		for j <- length[A] downto 1
			do B[C[A[j]]] <- A[j]
			   C[A[j]] <- C[A[j]] - 1
		
				
	[4] 시간복잡도
		- 세타(n+k), 또는 세타(n) if k=0(n).
		- k가 클 경우 비실용적
		- stable 정렬 알고리즘
			: 입력에 동일한 값이 있을때 입력에 먼저 나오는 값이 출력에서도 먼저 나온다
				-> counting stable하다
		
		***stable?
			: 배열 A에서 배열 B로 옮겨질때
				동일한 value를 가진 것끼리의 순서는 뒤 섞이지 않고
				순서대로 정렬이 되는 형태
				
			ex) 			_____	_____	_________	_
				A-index		4	7	1	5	3	6	8	2 ---- A index의 순서를 망가뜨리지 않음
				
				B-index		1	2	3	4	5	6	7	8
				B-value		0	0	2	2	3	3	3	5
				