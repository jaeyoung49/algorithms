**Red-Black Tree Insert**

	[1] Design Insert // 캡쳐 1
		- 보통의 BST에서처럼 노드(z)를 Insert한다.
		- 새로운 노드 z를 red노드로 한다.
		- RB-Insert-Fixup을 호출한다.
		
		RB-Insert(T, z)
			y <- nil[T]
			x <- root[T]
			while x != nil[T]
				do y <- x
					if key[z] < key[x]
						then x <- left[x]
						else x <- right[x]
			p[z] <- y
			if y == nil[T]
				then root[T] <- z
				else if key[z] < key[y]
					then left[y] <- z
					else right[y] <- z
			left[z] <- nil[T]
			right[z] <- nil[T]
			color[z] <- RED
			RB-Insert-Fixup(T, z)
			
	[2] RB-Insert_Fixup
	
		(1) 위반될 가능성이 있는 조건들 // 캡쳐 2
			1. OK.
			2. 만약 z가 루트노드라면 위반, 아니라면 OK.
			3. OK.
			4. z의 부모 p[z]가 red이면 위반.
			5. OK.
			
		(2) Loop Invariant ( 루프 내 변치 않는 내용 ) //캡쳐 3
			- z는 red노드
			- 오직 하나의 위반만이 존재한다.
				- 조건2 : z가 루트노드이면서 red이거나, 또는
				- 조건4 : z와 그 부모 p[z]가 둘 다 red이거나.
				
		(3) 종료조건
			: 부모노드 p[z]가 black이되면 종료한다. 
				조건2가 위반일 경우 z를 블랙으로 바꿔주고 종료한다.
				
		(4) RB-Insert_Fixup의 경우들 
		
			1) 경우1 : p[z]가 p[p[z]]의 왼쪽 자식 + z의 삼촌이 red	// 캡쳐 4
				- 조건 2와 4 이외의 조건들은 여전히 OK.면서 z가 두칸 위로 올라감
				
			2) 경우2 : z가 오른쪽 자식인 경우 // 캡쳐 5,6
				- p[z]에 대해서 left-rotation한 후 p[z]를 z로
				- 경우3으로 바뀜
				
			3) 경우3 : z가 왼쪽 자식인 경우
				- p[z]를 black, p[p[z]]를 red로 바꿈
				- p[p[z]]에 대해서 right-rotation
				
			4) 경우4,5,6 : p[z]가 p[p[z]]의 오른쪽 자식인 경우
				- 경우 1,2,3과 대칭적이므로 생략
				
		(5) Design RB-Insert_Fixup	// 캡쳐 7
				
			RB-Insert_Fixup(T, z)
				while color[p[z]] == RED
					do if p[z] == left[p[p[z]]]
						then y <- right[p[p[z]]]
							if color[y] == RED
								then color[p[z]] <- BLACK			// Case 1
									 color[y] <- BLACK				// Case 1
									 color[p[p[z]]] <- RED			// Case 1
									 z <- p[p[z]]					// Case 1
								else if z == right[p[z]]
									then z <- p[z]					// Case 2
										 Left-Rotate(T, z)			// Case 2
										 color[p[z]] <- BLACK		// Case 3
										 color[p[p[z]]] <- RED		// Case 3
										 Right-Rotate(T, p[p[z]])	// Case 3
								else 
									color[p[z]] <- BLACK			// Case 3
									color[p[p[z]]] <- RED			// Case 3
									Right-Rotate(T, p[p[z]])		// Case 3
						else (same as then clause with "right" and "left" exchanged)
				color[root[T]] <- BLACK
				
	[3] Insert의 Time Complexity	// 캡쳐 8
		- BST에서의 Insert : O(log 2 n)
		- RB-Insert_Fixup
			- 경우 1에 해당할 경우 z가 레벨2 상승
			- 경우 2,3 에 해당할 경우 O(1)
			- 따라서 트리의 높이에 비례하는 시간
		- 즉, Insert의 시간복잡도는 O(log 2 n)
		
	[4] insert의 흐름 예제 // 캡쳐9