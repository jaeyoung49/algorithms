**Red-Black Tree (레드블랙트리)**
	; Binary Search Tree에 생길 수 있는 시간복잡도의 오류를 해결
		- O(h)이 최악의 시간복잡도 O(n)이 될 수 있다.
			- 확률은 낮으나 보통 정렬된 값으로 전달 받을 수 있으므로 
				최악의 시간복잡도를 낮은 확률로 가진다고 할 수 없다.
				
	[1] Red-Balck Tree?
		- Binary Search Tree의 일종
		- 균형잡힌 트리 : 높이가 O(log2 n)
		- Search, Insert, Delete 연산을 최악의 경우에도 O(log2 n)시간에 지원
		
		- //첫번째 캡쳐, 두번째 캡쳐
			- 각 노드는 하나의 키(key), 왼쪽자식(left), 오른쪽 자식(right),
				그리고 부모노드(p)의 주소를 저장
			- 자식노드가 존재하지 않을 경우 NIL 노드라고 부르는 특수한 노드가
				있다고 가정
			- 따라서 모든 리프노드는 NIL노드
			- 루트의 부모도 NIL노드라고 가정
			- 노드들은 내부노드와 NIL노드로 분류
			
	[2] Red-Black Tree 정의
		- 다음의 조건을 만족하는 Binary Search Tree
			1. 각 노드는 red 혹은 black 이고,
			2. 루트노드는 black 이고,
			3. 모든 리프노드 (즉, NIL노드)는 black 이고,
			4. red노드의 자식노드들은 전부 black이고
				(즉, red노드는 연속되어 등장하지 않고),
			5. 모든 노드에 대해서 그 노드로부터 자손인 리프노드에 이르는
				모든 경로에는 동일한 개수의 black노드가 존재한다.
				
	[3] Red-Black Tree 높이
		- 노드 x의 높이 h(x)는 자신으로부터 리프노드까지의 
			가장 긴 경로에 포함된 에지의 개수이다.
		- 노드 x의 블랙-높이 bh(x)는 x로부터 리프노드까지의 경로상의
			블랙노드의 개수이다 (노드 x 자신은 불포함)
		- //세번째 캡쳐, 네번째 캡쳐
			- 높이가 h인 노드의 블랙-높이는 bh>=h/2 이다.
				- 조건4에 의해 레드노드는 연속될 수 없으므로 당연
			- 노드 x를 루트로 하는 임의의 부트리는 적어도 
				2^bh(x) - 1개의 내부노드를 포함한다. (수학적귀납법)
			- n개의 내부노드를 가지는 Red-Black Tree의 높이는 2log 2 (n+1) 이하이다.
				- n >= 2^bh -1 >= 2^h/2 -1 이므로, 
					여기서 bh와 h는 각각 루트 노드의 블랙-높이와 높이  
					
	[4] Left and Right Rotation //다섯번째 캡쳐, 여섯번째 캡쳐, 일곱번째 캡쳐
		- 시간복잡도 O(1) : 반복문이 없다
		- Binary Search Tree의 특성을 유지
		
		- Design Left Rotation
			- y = right[x] != NIL이라고 가정
			- 루트노드의 부모도 NIL이라고 가정
			
			Left-Rotate(T, x)	// T는 트리, x는 이동할 노드
				y <- right[x]			// set y.
				right[x] <- left[y]		// Trun y's left subtree into x's right subtree
				p[left[y]] <- x
				p[y] <- p[x]			// Link x's parent to y
				if p[x] = nil[T]
					then root[T] <- y
					else if x = left[p[x]]
						then left[p[x]] <- y
						else right[p[x]] <- y
				left[y] <- x			// Put x on y's left
				p[x] <- y
		