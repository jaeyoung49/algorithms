**Tree & Binary Tree**
	[1] Tree
		1) 계층적인 구조를 표현
			- 조직도
			- 디렉토리와 서브디렉토리 구조
			- 가계도
			
		2) 용어
			- 트리는 노드(node)들과 노드들을 연결하는 링크(link)들로 구성됨
				- link, edge, branch : 노드들을 연결하는 선
				- 부트리(subtree) : 트리에서 어떤 한 노드와 그 노드의 자손들로 이루어진 트리
				- 레벨(level) : 루트부터 자손까지 오름차순으로 단계를 부여
									ex) 루트-level 1(0), ... , 리프-level n(n-1)
				- 높이(height) : 트리의 높이
				
			- 관계
				- 계층구조에 따른 관계
					- 부모노드(parent node), 자식노드(child node) : 계층구조 내 상대적인 관계
					- 형제관계(sibling)
						- 루트노드를 제외한 트리의 모든 노드들은 유일한 부모 노드를 가짐
						- 부모가 동일한 노드들
					- 조상(ancestor)-자손(descendant)관계 : 부모-자식 관계를 확장한 것
				- 위치상의 관계	
					- 루트(root) : 맨 위의 노드
					- 리프노드(leaf node) : 자식이 없는 노드
					- 내부노드(internal node) : 리프노드가 아닌 노드
				
		3) 기본적인 성질
			- 노드가 n개인 트리는 항상 n-1개의 링크(link)를 가진다.
			- 트리에서 루트부터 어떤 노드로 가는 경로는 유일하다.
				또한 임의의 두 노드간의 경로도 유일하다.
				(같은 노드를 두 번 이상 방문하지 않는다는 조건하에)
				
	[2] Binary Tree (이진 트리)
		1) 특징
			- 이진 트리에서 각 노드는 최대 2개의 자식을 가진다.
			- 각각의 자식 노드는 자신이 부모의 왼쪽 자식인지 오른쪽 자식인지가 지정된다.
				(자식이 한 명인 경우에도)
				
		2) 이진 트리 응용의 예
			- Expression Tree
			- Huffman Code
		
		3) Full and Complete Binary Trees
			- 높이가 h인 full binary tree는 2^h -1 개의 노드를 가진다.
			- 노드가 N개인 full 혹은 complete 이진 트리의 높이는 O(log N)이다.
				(노드가 N개인 이진트리의 높이는 최악의 경우 N이 될 수도 있다.)
				
		4) 이진트리의 표현
			- 연결구조 (Linked Structure) 표현
				- 각 노드에 하나의 데이터 필드와 왼쪽자식(left), 오른쪽 자식(right),
					그리고 부모노드(p)의 주소를 저장
					(부모노드의 주소는 반드시 필요한 경우가 아니면 보통 생략함)
					
		5) 이진트리의 순회 (traversal)
			- 순회 : 이진 트리의 모든 노드를 방문하는 일
				- 중순위(inorder) 순회
				- 선순위(preorder) 순회
				- 후순위(postorder) 순회
				- 레벨오더(level-order) 순회
				
			- Inorder-traversal (중순위 순회)
				- 순서
					1st 먼저 T_L 을 inorder로 순회하고
					2nd r을 순회하고				// 루트노드r, 
					3rd T_R을 inorder로 순회.		// 왼쪽 부트리 T_L, 
													// 오른쪽 부트리 T_R
													
				- Design Inorder-traversal
					Inoerder-Tree-Walk(x)
						if x != null
							then Inorder_Tree-Walk(left[x])
								 print key[x]
								 Inorder-Tree-Walk(right[x])
								 
				- 시간복잡도 : O(n)
				
				- (x + y) * ((a + b) / c)
			
				
			- Preorder-traversal (선순위 순회)
				- Design Preorder-traversal
					Preorder-Tree-Walk(x)
						if x != null
							then print key[x]
								 Preorder-Tree-Walk(left[x])
								 Preorder-Tree-Walk(right[x])
								 
				- 시간복잡도 : O(n)
			
						
			- Postorder-traversal (후순위 순회)
				- Design Postorder-traversal
					Postorder-Tree-Walk(x)
						if x != null
							then Postorder-Tree-Walk(left[x])
								 Postorder-Tree-Walk(right[x])
								 print key[x]
								 
				- 시간복잡도 : O(n)
				
				- x y + a b + c / *	
						
						
			- Level-Order-traversal (레벨오더 순회)
				- 특징
					- 레벨 순으로 방문, 동일 레벨에서는 왼쪽에서 오른쪽 순서로
					- 큐(queue)를 이용하여 구현
				
				- Design Level-Order-Tree-traversal
					Level-Order-Tree-traversal()
						visit the root;
						Q <- root;				// Q is a queue
						while Q is not empty do
							v <- dequeue(Q);
							visit children of v into Q;
						end.
					end.
				
							
						
						
						