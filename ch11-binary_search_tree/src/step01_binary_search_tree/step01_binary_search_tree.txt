**Binary Search Tree : 이진 검색 트리**

	[1] Dynamic Set(=Dictionary, Search Structure)
		- 여러 개의 키(key)를 저장
		- 다음과 같은 연상들을 지원하는 자료구조
			- Insert : 새로운 키의 삽입
			- Search : 키 탐색
			- Delete : 키의 삭제
			
			ex) 심볼 테이블
			
		1) 시간복잡도
								Search		Insert		Delete
			
			---------------------------------------------------
								
						정렬	O(log n)	O(n)		O(n)
			배열
						정렬X	O(n)		O(1), O(n)	O(1)
			
			---------------------------------------------------
			
						정렬	O(n)		O(n)		O(1)
			연결리스트
						정렬X	O(n)		O(1)		O(1)
						
						
		2) 다양한 방법들
			- ***정렬된 혹은 정렬되지 않은 배열 혹은 연결 리스트를 사용할 경우
				Insert, Search, Delete 중 적어도 하나는 O(n)
			- 이진탐색트리(Binary Search tree), 레드-블랙 트리, AVL-트리 등의 트리에 기반한 구조들
			- Direct Address Table, 해쉬 테이블 등
		
		
		3) 검색트리
			- Dynamic set 을 트리의 형태로 구현
			- 일반적으로 Search, Insert, Delete 연산이 
				트리의 높이(height)에 비례하는 시간복잡도를 가짐
			- 이진트리검색(Binary Search Tree), 레드-블랙 트리(red-black tree),
				B-트리, AVL-트리 등
				
	[2] 이진검색트리 ( Binary Search Tree ) // 사진참조 - BinarySearchTree-1_basic1~2.jpg
		- 이진 트리이면서
		- 각 노드에 하나의 키를 저장
		- 각 노드 v에 대해서 그 노드의 왼쪽 부트리(subtree)에 있는 키들은
			key[v]보다 작거나 같고, 오른쪽 부트리에 있는 값은 크거나 같다.
			
		1) Design Binary Search Tree
			
			1. Recursion version
				
				TreeSearch(x, k)						// x : 루트노드, k : 찾는 값
					if x=null or k=key[x]				// key[x] : 노드x에 저장된 값
						then return x
					if k < key[x]
						then return TreeSearch(left[x], k)
					else
						return treeSearch(right[x], k)
				
				- 시간복잡도 : O(h) ----- 여기서 h는 트리의 높이
			
			2. Iterative version
				
				IterativeTreeSearch(x, k)
					while x!=null or k!=key[x]
						do if k<key[x]
							then x <- left[x]
						   else x <- right[x]
					return x
					
				- 시간복잡도 : O(h) ----- 여기서 h는 트리의 높이
			
	