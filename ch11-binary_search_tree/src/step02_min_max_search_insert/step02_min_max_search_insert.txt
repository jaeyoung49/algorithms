**Binary Search Tree**

	[1] Minimum (최소값)
		
		1) Design 
		
			Tree-Minimum(x)
				while left[x] != null
					do x <- left[x]
				return x
				
		2) 최소값은 항상 가장 왼쪽 노드에 존재
		
		3) 시간복잡도 : O(h)
		
		
	[2] Maximum (최대값)
		
		1) Design 
		
			Tree-Maximum(x)
				while right[x] != null
					do x <- right[x]
				return x
				
		2) 최소값은 항상 가장 오른쪽 노드에 존재
		
		3) 시간복잡도 : O(h)
		
		
	[3] Successor // 사진참조 : min_max_search_insert-1_Successor.jpg
			: 노드 x의 successor란 key[x]보다 크면서 가장 작은 키를 가진 노드
				(모든 키들이 서로 다르다고 가정)
				
		1) 3가지 경우
			- 노드 x의 오른쪽 부트리가 존재할 경우, 오른쪽 부트리의 최소값.
			- 오른쪽 부트리가 없는 경우, 어떤 노드 y의 왼쪽 부트리의 최대값이 x가 되는
				그런 노드가 y가 x의 successor
					- 부모를 따라 루트까지 올라가면서 처음으로 누군가의 왼쪽 자식이 되는 노드
			- 그런 노드 y가 존재하지 않을 경우 successor가 존재하지 않음 ( 즉, x가 최대값 )
			
		2) Design
			
			Tree-Successor(x)
				if right[x] != null
					then return Tree-Minimum(right[x])
				y <- p[x]
				while y!=null and x=right[y]
					do x <- y
					y <- p[y]
				return y
				
		3) 시간복잡도 : O(h)
		
		
	[4] Predecessor
			: 노드 x의 predecessor란 key[x]보다 작으면서 가장 큰 키를 가진 노드
				(Successor와 반대)
				
		
	[5] Insert	// 사진참조 : min_max_search_insert-2_Insert1~2.jpg
		
		1) design
		
			Tree-Insert(T, z)
				y <- null
				x <- root[T]
				while x!=null
					do y <- x
						if key[z] <key[x]
							then x <- left[x]
						else
							x <- right[x]
				p[z] <- y
				if y==null
					then root[T] <- z		// Tree T was empty
				else if key[z] < key[y]
					then left[y] <- z
				else
					right[y] <- z